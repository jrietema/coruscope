#tree1.column-content

!= javascript_tag do
  $('#tree1').fancytree({
  minExpandLevel: 1,
  // prevent navigation on re-load
  postinit: function(isReloading, isError) {
  this.reactivate();
  },
  extensions: [
  'dnd' // , 'persist'
  ],
  source: [
  { title: '#{t('admin.cms.base.sites')}', href: '#{admin_cms_sites_path}' },
  { title: '#{@site.label} actions', key: 'actions', folder: true, children:
  [
  { title: '#{t('admin.cms.base.layouts')}', href: '#{admin_cms_site_layouts_path(@site)}'},
  { title: '#{t('admin.cms.base.pages')}', href: '#{admin_cms_site_pages_path(@site)}'},
  { title: '#{t('admin.cms.base.snippets')}', href: '#{admin_cms_site_snippets_path(@site)}'},
  { title: '#{t('admin.cms.base.files')}', href: '#{admin_cms_site_files_path(@site)}'}
  ]
  }],
  // persist: {
  // mode: "hide"
  // },
  dnd:
  {
  preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
  preventRecursiveMoves: true, // Prevent dropping nodes on own descendants
  autoExpandMS: 400,
  onDragStart: function(node) {
  // This function MUST be defined to enable dragging for the tree.
  // Return false to cancel dragging of node.
  return true;
  },
  onDragEnter: function(node, sourceNode) {
  // sourceNode may be null for non-fancytree droppables.
  // Return false to disallow dropping on node. In this case
  // onDragOver and onDragLeave are not called.
  // Return 'over', 'before, or 'after' to force a hitMode.
  // Return ['before', 'after'] to restrict available hitModes.
  // Any other return value will calc the hitMode from the cursor position.
  //
  // Prevent dropping a parent below another parent (only sort
  // nodes under the same parent)
  //   if(node.parent !== sourceNode.parent){
  //     return false;
  //   }
  // Don't allow dropping *over* a node (would create a child)
  // return ["before", "after"];
  //
  return true;
  },
  onDrop: function(node, sourceNode, hitMode, ui, draggable) {
  // This function MUST be defined to enable dropping of items on
  // the tree.
  sourceNode.moveTo(node, hitMode);
  }
  },
  click: function(event, data) {
  var node = data.node;
  // Use href attribute to load the content
  if( node.data.href ){
  // Open target
  window.open(node.data.href, node.data.target || '_self');
  }
  }
  });

